# Template file for 'oneplus-msm8998-kernel'
_githash=7f8bff52f945b1e8c6734eca78a7e9822d205807 # tip of v5.12 branch as of 2021-07-28
_gitshort=${_githash:0:7}

# FIXME: Module has invalid ELF structures (when msm and such probe in initramfs!!!)
# FIXME: date/time not stored properly for kver!
# [    0.000000] Linux version 5.12.5_4 (voidlinux@voidlinux) (aarch64-linux-musl-gcc (GCC) 10.2.1 20201203, GNU ld (GNU Binutils) 2.35.1) #1 SMP PREEMPT 1622638872
pkgname=oneplus-msm8998-kernel
version=5.12.19
revision=1
wrksrc="linux-mainline-oneplus5-${_githash}"
_series=${version%.*} # e.g. 5.12
short_desc="Linux kernel and modules (${_series} series [git ${_gitshort}])"
maintainer="Jami Kettunen <jami.kettunen@protonmail.com>"
license="GPL-2.0-only"
homepage="https://www.kernel.org"
distfiles="https://github.com/JamiKettunen/linux-mainline-oneplus5/archive/${_githash}.tar.gz"
checksum=fc9a8646ad4bc4ac10156f561658810443756d3739ae9c86c59f1f68af3ffad1
python_version=3
patch_args="-Np1"

archs="aarch64*"
_arch="arm64"

nodebug=yes	# -dbg package is generated below manually
nostrip=yes
noverifyrdeps=yes
noshlibprovides=yes
preserve=yes

hostmakedepends="tar xz bc elfutils-devel flex gmp-devel kmod libmpc-devel
 openssl-devel perl cpio pahole python3"

_kernver="${version}_${revision}"
triggers="kernel-hooks"
kernel_hooks_version="${_kernver}"

# These files could be modified when an external module is built.
mutable_files="
 /usr/lib/modules/${_kernver}/modules.builtin.bin
 /usr/lib/modules/${_kernver}/modules.builtin.alias.bin
 /usr/lib/modules/${_kernver}/modules.softdep
 /usr/lib/modules/${_kernver}/modules.dep
 /usr/lib/modules/${_kernver}/modules.dep.bin
 /usr/lib/modules/${_kernver}/modules.symbols
 /usr/lib/modules/${_kernver}/modules.symbols.bin
 /usr/lib/modules/${_kernver}/modules.alias
 /usr/lib/modules/${_kernver}/modules.alias.bin
 /usr/lib/modules/${_kernver}/modules.devname"

# reproducible build
export KBUILD_BUILD_TIMESTAMP=${SOURCE_DATE_EPOCH:-0}
export KBUILD_BUILD_USER=voidlinux
export KBUILD_BUILD_HOST=voidlinux

if [ "$CROSS_BUILD" ]; then
	_cross="CROSS_COMPILE=${XBPS_CROSS_TRIPLET}-"
fi
if [ "${_patchver}" ]; then
	_version="EXTRAVERSION=${_patchver}"
fi

do_configure() {
	# 5.10 misses Documentation/DocBook. We ship the directory from 4.12 here.
	cp -a $FILESDIR/DocBook -t Documentation

	if [ -f ${FILESDIR}/dotconfig-custom ]; then
		msg_normal "Detected a custom .config file, using it.\n"
		cp -f ${FILESDIR}/dotconfig-custom .config
		make ${makejobs} ARCH=${_arch} ${_cross} oldconfig
	elif [ -f ${FILESDIR}/dotconfig ]; then
		msg_normal "Detected a .config file, using it.\n"
		cp -f ${FILESDIR}/dotconfig .config
		make ${makejobs} ARCH=${_arch} ${_cross} oldconfig
	else
		msg_normal "Defaulting to 'oneplus5_defconfig'.\n"
		make ${makejobs} ARCH=${_arch} ${_cross} oneplus5_defconfig
	fi

	# Always use our revision to CONFIG_LOCALVERSION to match our pkg version.
	sed -i -e "s|^\(CONFIG_LOCALVERSION=\).*|\1\"_${revision}\"|" .config
}

do_build() {
	export LDFLAGS=
	make ARCH=${_arch} ${_version} ${_cross} ${makejobs} prepare
	make ARCH=${_arch} ${_version} ${_cross} ${makejobs} Image modules dtbs
}

do_install() {
	local subarch _args hdrdest

	# Run depmod after compressing modules.
	sed -i '2iexit 0' scripts/depmod.sh

	# Install kernel, firmware and modules
	make ${makejobs} ARCH=${subarch:-${_arch}} INSTALL_MOD_PATH=${DESTDIR} modules_install

	hdrdest=${DESTDIR}/usr/src/kernel-headers-${_kernver}

	vinstall .config 644 boot config-${_kernver}
	vinstall System.map 644 boot System.map-${_kernver}

	vinstall arch/${_arch}/boot/Image 644 boot vmlinux-${_kernver}
	make ${makejobs} ARCH=${subarch:-${_arch}} INSTALL_DTBS_PATH=${DESTDIR}/boot/dtbs/dtbs-${_kernver} dtbs_install

	# Switch to /usr.
	vmkdir usr
	mv ${DESTDIR}/lib ${DESTDIR}/usr

	cd ${DESTDIR}/usr/lib/modules/${_kernver}
	rm -f source build
	ln -sf ../../../src/kernel-headers-${_kernver} build

	cd ${wrksrc}
	# Install required headers to build external modules
	install -Dm644 Makefile ${hdrdest}/Makefile
	install -Dm644 kernel/Makefile ${hdrdest}/kernel/Makefile
	install -Dm644 .config ${hdrdest}/.config
	for file in $(find . -name Kconfig\*); do
		mkdir -p ${hdrdest}/$(dirname $file)
		install -Dm644 $file ${hdrdest}/${file}
	done
	for file in $(find arch/${subarch:-${_arch}} -name module.lds -o -name Kbuild.platforms -o -name Platform); do
		mkdir -p ${hdrdest}/$(dirname $file)
		install -Dm644 $file ${hdrdest}/${file}
	done
	mkdir -p ${hdrdest}/include
	# Remove firmware stuff provided by the "linux-firmware" pkg.
	rm -rf ${DESTDIR}/usr/lib/firmware

	for i in acpi asm-generic clocksource config crypto drm generated linux vdso \
		math-emu media net pcmcia scsi sound trace uapi video xen dt-bindings; do
		if [ -d include/$i ]; then
			cp -a include/$i ${hdrdest}/include
		fi
	done

	cd ${wrksrc}
	mkdir -p ${hdrdest}/arch/${_arch}
	cp -a arch/${_arch}/include ${hdrdest}/arch/${_arch}

	# Remove helper binaries built for host,
	# if generated files from the scripts/ directory need to be included,
	# they need to be copied to ${hdrdest} before this step
	if [ "$CROSS_BUILD" ]; then
		make ${makejobs} ARCH=${subarch:-${_arch}} _mrproper_scripts
		# remove host specific objects as well
		find scripts -name '*.o' -delete
	fi

	# Copy files necessary for later builds, like nvidia and vmware
	cp Module.symvers ${hdrdest}
	cp -a scripts ${hdrdest}
	mkdir -p ${hdrdest}/security/selinux
	cp -a security/selinux/include ${hdrdest}/security/selinux
	mkdir -p ${hdrdest}/tools/include
	cp -a tools/include/tools ${hdrdest}/tools/include

	mkdir -p ${hdrdest}/arch/${_arch}/kernel
	cp arch/${_arch}/Makefile ${hdrdest}/arch/${_arch}
	mkdir -p ${hdrdest}/arch/${_arch}/kernel
	cp -a arch/${_arch}/kernel/vdso ${hdrdest}/arch/${_arch}/kernel/

	# add headers for lirc package
	# pci
	for i in bt8xx cx88 saa7134; do
		mkdir -p ${hdrdest}/drivers/media/pci/${i}
		cp -a drivers/media/pci/${i}/*.h ${hdrdest}/drivers/media/pci/${i}
	done
	# usb
	for i in cpia2 em28xx pwc; do
		mkdir -p ${hdrdest}/drivers/media/usb/${i}
		cp -a drivers/media/usb/${i}/*.h ${hdrdest}/drivers/media/usb/${i}
	done
	# i2c
	mkdir -p ${hdrdest}/drivers/media/i2c
	cp drivers/media/i2c/*.h ${hdrdest}/drivers/media/i2c
	for i in cx25840; do
		mkdir -p ${hdrdest}/drivers/media/i2c/${i}
		cp -a drivers/media/i2c/${i}/*.h ${hdrdest}/drivers/media/i2c/${i}
	done

	# Add docbook makefile
	install -Dm644 Documentation/DocBook/Makefile \
		${hdrdest}/Documentation/DocBook/Makefile

	# Add md headers
	mkdir -p ${hdrdest}/drivers/md
	cp drivers/md/*.h ${hdrdest}/drivers/md

	# Add inotify.h
	mkdir -p ${hdrdest}/include/linux
	cp include/linux/inotify.h ${hdrdest}/include/linux

	# Add wireless headers
	mkdir -p ${hdrdest}/net/mac80211/
	cp net/mac80211/*.h ${hdrdest}/net/mac80211

	# add dvb headers for external modules
	# mkdir -p ${hdrdest}/include/config/dvb/
	# cp include/config/dvb/*.h ${hdrdest}/include/config/dvb/

	# add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
	mkdir -p ${hdrdest}/drivers/media/dvb-frontends
	cp drivers/media/dvb-frontends/lgdt330x.h \
		${hdrdest}/drivers/media/dvb-frontends/
	cp drivers/media/i2c/msp3400-driver.h ${hdrdest}/drivers/media/i2c/

	# add dvb headers
	mkdir -p ${hdrdest}/drivers/media/usb/dvb-usb
	cp drivers/media/usb/dvb-usb/*.h ${hdrdest}/drivers/media/usb/dvb-usb/
	mkdir -p ${hdrdest}/drivers/media/dvb-frontends
	cp drivers/media/dvb-frontends/*.h ${hdrdest}/drivers/media/dvb-frontends/
	mkdir -p ${hdrdest}/drivers/media/tuners
	cp drivers/media/tuners/*.h ${hdrdest}/drivers/media/tuners/

	# Add xfs and shmem for aufs building
	mkdir -p ${hdrdest}/fs/xfs/libxfs
	mkdir -p ${hdrdest}/mm
	cp fs/xfs/libxfs/xfs_sb.h ${hdrdest}/fs/xfs/libxfs/xfs_sb.h

	# Add objtool binary, needed to build external modules with dkms
	case "$XBPS_TARGET_MACHINE" in
		x86_64*)
			mkdir -p ${hdrdest}/tools/objtool
			cp tools/objtool/objtool ${hdrdest}/tools/objtool
			;;
	esac

	# Remove unneeded architectures
	for arch in alpha avr32 blackfin cris frv h8300 \
		ia64 m* s* um v850 xtensa x86* p*; do
		rm -rf ${hdrdest}/arch/${_arch}
	done
	# Keep arch/x86/ras/Kconfig as it is needed by drivers/ras/Kconfig
	mkdir -p ${hdrdest}/arch/x86/ras
	cp -a arch/x86/ras/Kconfig ${hdrdest}/arch/x86/ras/Kconfig

	# Extract debugging symbols and compress modules
	msg_normal "$pkgver: extracting debug info and compressing modules, please wait...\n"
	install -Dm644 vmlinux ${DESTDIR}/usr/lib/debug/boot/vmlinux-${_kernver}
	(
	cd ${DESTDIR}
	export DESTDIR
	find ./ -name '*.ko' -print0 | \
		xargs -0r -n1 -P ${XBPS_MAKEJOBS} ${FILESDIR}/mv-debug
	)
	# ... and run depmod again.
	depmod -b ${DESTDIR}/usr -F System.map ${_kernver}

	# Drop non-MSM8998 DTBs
	find ${DESTDIR}/boot/dtbs -type f -name "*.dtb" -not -name "msm8998*" -delete
}
oneplus-msm8998-kernel-headers_package() {
	preserve=yes
	nostrip=yes
	noshlibprovides=yes
	short_desc+=" - source headers for 3rd party modules"
	pkg_install() {
		vmove usr/src
		vmove usr/lib/modules/${_kernver}/build
	}
}
oneplus-msm8998-kernel-dbg_package() {
	preserve=yes
	nostrip=yes
	noverifyrdeps=yes
	noshlibprovides=yes
	repository=debug
	short_desc+=" - debugging symbols"
	pkg_install() {
		vmove usr/lib/debug
	}
}
#oneplus-msm8998-kernel-bootimg_package() {
#	hostmakedepends="abootimg"
#	preserve=yes
#	nostrip=yes
#	noshlibprovides=yes
#	short_desc+=" - Android boot.img support"
#	pkg_install() {
#		local dtb="msm8998-oneplus-dumpling"
#		# TODO:
#		# https://docs.voidlinux.org/config/kernel.html#kernel-hooks - for flashing & generating img on post-install
#		# https://github.com/void-linux/void-packages/blob/master/Manual.md
#		# https://wiki.postmarketos.org/wiki/Deviceinfo_reference - device specific info
#		# 1. append DTB as per /etc/deviceinfo? fix 5T bootloader issue to accept multiple DTBs?
#		# 2. depend on initfs-tools package to provide ramdisk
#		# 3. vmkdir boot
#		# 4. abootimg --create ${DESTDIR}/boot/boot.img -f ${FILESDIR}/abootimg.cfg -k Image.gz-dtb -r /boot/initramfs-void.tar.lz4
#		# FIXME: how to depend on this from device specific while having /etc/deviceinfo present?
#	}
#}
