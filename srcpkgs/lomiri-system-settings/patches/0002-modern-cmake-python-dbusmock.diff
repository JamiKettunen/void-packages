Link: https://gitlab.com/ubports/development/core/lomiri-system-settings/-/merge_requests/354 @ b6c7a807
---
diff --git a/CMakeLists.txt b/CMakeLists.txt
index d7cea717..148e2790 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,5 +1,5 @@
 project(lomiri-system-settings C CXX)
-cmake_minimum_required(VERSION 2.8.10)
+cmake_minimum_required(VERSION 3.5)
 
 if(${PROJECT_BINARY_DIR} STREQUAL ${PROJECT_SOURCE_DIR})
    message(FATAL_ERROR "In-tree build attempt detected, aborting. Set your build dir outside your source dir, delete CMakeCache.txt from source root and try again.")
@@ -16,6 +16,8 @@ set(LIBDIR ${CMAKE_INSTALL_LIBDIR})
 enable_testing()
 
 option(ENABLE_TESTS "Build tests" ON)
+# TODO: drop this with migration to jammy and beyond!
+option(MODERN_PYTHON_DBUSMOCK "Adapt tst-bluetooth-device to work with python-dbusmock 0.26+" OFF)
 
 if(cmake_build_type_lower MATCHES coverage)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --coverage" )
diff --git a/tests/plugins/bluetooth/CMakeLists.txt b/tests/plugins/bluetooth/CMakeLists.txt
index 5c37d7d4..ffcc7bd3 100644
--- a/tests/plugins/bluetooth/CMakeLists.txt
+++ b/tests/plugins/bluetooth/CMakeLists.txt
@@ -46,6 +46,9 @@ add_executable(tst-bluetooth-device
     fakebluez.cpp
     ${PLUGIN_SOURCES}
 )
+if(MODERN_PYTHON_DBUSMOCK)
+    add_definitions(-DMODERN_PYTHON_DBUSMOCK)
+endif()
 
 target_link_libraries(tst-bluetooth-device
     ${QTDBUSMOCK_LIBRARIES}
diff --git a/tests/plugins/bluetooth/fakebluez.cpp b/tests/plugins/bluetooth/fakebluez.cpp
index 399dcde1..5207800a 100644
--- a/tests/plugins/bluetooth/fakebluez.cpp
+++ b/tests/plugins/bluetooth/fakebluez.cpp
@@ -80,7 +80,8 @@ FakeBluez::pairDevice(const QString &address)
 {
     QDBusReply<void> reply = m_bluezMock->call("PairDevice",
                                                   m_currentAdapter,
-                                                  address);
+                                                  address,
+                                                  MOCK_PHONE_CLASS);
 
     if (!reply.isValid()) {
         qWarning() << "Failed to pair mock device:" << reply.error().message();
diff --git a/tests/plugins/bluetooth/fakebluez.h b/tests/plugins/bluetooth/fakebluez.h
index 6b527381..b94f8bb3 100644
--- a/tests/plugins/bluetooth/fakebluez.h
+++ b/tests/plugins/bluetooth/fakebluez.h
@@ -37,6 +37,10 @@
 
 #define FREEDESKTOP_PROPERTIES_IFACE "org.freedesktop.DBus.Properties"
 
+// The device class of some arbitrary Android phone.
+//#define MOCK_PHONE_CLASS 5898764
+#define MOCK_PHONE_CLASS 0x5A020C
+
 using namespace QtDBusTest;
 using namespace QtDBusMock;
 
diff --git a/tests/plugins/bluetooth/tst_device.cpp b/tests/plugins/bluetooth/tst_device.cpp
index 2db9a9a1..fbb67c12 100644
--- a/tests/plugins/bluetooth/tst_device.cpp
+++ b/tests/plugins/bluetooth/tst_device.cpp
@@ -71,8 +71,12 @@ void DeviceTest::init()
     m_bluezMock = new FakeBluez();
     m_bluezMock->addAdapter("new0", "bluetoothTest");
     m_bluezMock->addDevice("My Phone", "00:00:de:ad:be:ef");
+#if MODERN_PYTHON_DBUSMOCK
+    m_bluezMock->setProperty("/org/bluez/new0/dev_00_00_DE_AD_BE_EF", "org.bluez.Device1", "Class", QVariant(MOCK_PHONE_CLASS));
+#else
     // Only this will set the 'Class' and 'Icon' properties for the device ...
     m_bluezMock->pairDevice("00:00:de:ad:be:ef");
+#endif
     m_dbus = new QDBusConnection(m_bluezMock->dbus());
 
     QList<QString> devices = m_bluezMock->devices();
@@ -112,6 +116,12 @@ void DeviceTest::testGetType()
 
 void DeviceTest::testIsPaired()
 {
+#if MODERN_PYTHON_DBUSMOCK
+    m_bluezMock->pairDevice("00:00:de:ad:be:ef");
+
+    processEvents();
+#endif
+
     QCOMPARE(m_device->isPaired(), true);
 
     m_bluezMock->setProperty("/org/bluez/new0/dev_00_00_DE_AD_BE_EF", "org.bluez.Device1", "Paired", QVariant(false));
